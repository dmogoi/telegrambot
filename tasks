# task.py
import asyncio
import logging
from telethon import TelegramClient
from django.conf import settings
from django.utils import timezone
from celery import shared_task
from .models import ScheduledMessage
from asgiref.sync import sync_to_async

logger = logging.getLogger(__name__)


async def send_to_all_dialogs(client, message):
    """Send message to all dialogs (including channels and groups) with error handling"""
    success = 0
    failures = 0
    async for dialog in client.iter_dialogs():
        try:
            # Send to both groups and channels
            if dialog.is_group or dialog.is_channel or dialog.is_user:
                await client.send_message(dialog.id, message.content)
                success += 1
                logger.info(f"‚úÖ Sent message to {dialog.name} ({dialog.id})")
            else:
                # If it's neither a group nor a channel, you can choose to log or ignore
                logger.debug(f"‚ùå Skipping non-group/channel dialog {dialog.name} ({dialog.id})")

        except Exception as e:
            logger.error(f"‚ùå Failed to send message to {dialog.name} ({dialog.id}): {str(e)}")
            failures += 1

    return success, failures


@shared_task
def process_scheduled_messages():
    """Main Celery task for message scheduling"""
    logger.info("üöÄ Starting scheduled messages processing")

    async def runner():
        async with TelegramClient('scheduler', settings.API_ID, settings.API_HASH) as client:
            await client.start(settings.PHONE_NUMBER)
            messages = await sync_to_async(list)(ScheduledMessage.objects.filter(is_active=True))

            for msg in sorted(messages, key=lambda x: x.order):
                msg = await sync_to_async(ScheduledMessage.objects.get)(id=msg.id)

                if msg.is_processing:
                    continue  # Skip messages already being processed

                now = timezone.now()
                send_immediately = msg.last_sent is None
                time_since_last = (now - msg.last_sent).total_seconds() if msg.last_sent else 0

                if send_immediately or time_since_last >= msg.interval_hours * 3600:
                    try:
                        # Mark as processing
                        msg.is_processing = True
                        await sync_to_async(msg.save)()

                        # Send message
                        logger.info(f"üì§ Sending message #{msg.order}")
                        success, failures = await send_to_all_dialogs(client, msg)

                        # Update tracking
                        msg.last_sent = timezone.now()
                        msg.is_processing = False
                        await sync_to_async(msg.save)()

                        logger.info(f"‚úÖ Sent message #{msg.order} to {success} dialogs")
                        if failures > 0:
                            logger.warning(f"‚ö†Ô∏è Failed to send to {failures} dialogs")

                        # Wait for interval before next message
                        if msg != messages[-1]:
                            wait_time = msg.interval_hours * 3600
                            logger.info(f"‚è≥ Waiting {msg.interval_hours} hours before next message")
                            await asyncio.sleep(wait_time)

                    except Exception as e:
                        logger.error(f"‚ùå Error processing message #{msg.order}: {str(e)}")
                        msg.is_processing = False
                        await sync_to_async(msg.save)()
                else:
                    logger.info(f"‚è≠Ô∏è Skipping message #{msg.order} (not due yet)")

    asyncio.run(runner())
